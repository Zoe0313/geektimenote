是否可以理解为：计算密集型用多进程，IO密集型用多线程？

如果你想对 CPU 密集型任务加速，使用多线程是无效的，请使用多进程。
这里所谓的 CPU 密集型任务，是指会消耗大量 CPU 资源的任务，
比如求 1 到 100000000 的乘积，或者是把一段很长的文字编码后又解码等等。

使用多线程之所以无效，原因正是我们前面刚讲过的，
Python 多线程的本质是多个线程互相切换，但同一时刻仍然只允许一个线程运行。
因此，你使用多线程，和使用一个主线程，本质上来说并没有什么差别；
反而在很多情况下，因为线程切换带来额外损耗，还会降低程序的效率。

而如果使用多进程，就可以允许多个进程之间 in parallel 地执行任务，所以能够有效提高程序的运行效率。

至于 I/O 密集型任务，如果想要加速，请优先使用多线程或 Asyncio。
当然，使用多进程也可以达到目的，但是完全没有这个必要。
因为对 I/O 密集型任务来说，大多数时间都浪费在了 I/O 等待上。
因此，在一个线程 / 任务等待 I/O 时，我们只需要切换线程 / 任务去执行其他 I/O 操作就可以了。

不过，如果 I/O 操作非常多、非常 heavy，需要建立的连接也比较多时，我们一般会选择 Asyncio。
因为 Asyncio 的任务切换更加轻量化，并且它能启动的任务数也远比多线程启动的线程数要多。
当然，如果 I/O 的操作不是那么的 heavy，那么使用多线程也就足够了。