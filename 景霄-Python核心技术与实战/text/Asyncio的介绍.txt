Sync，是指操作一个接一个地执行，下一个操作必须等上一个操作完成后才能执行。

Async 是指不同操作间可以相互交替执行，如果其中的某个操作被 block 了，
程序并不会等待，而是会找出可执行的操作继续执行。


if io_bound:
    if io_slow:
        print('Use Asyncio')
    else:
        print('Use multi-threading')
else if cpu_bound:
    print('Use multi-processing')


如果是 I/O bound，并且 I/O 操作很慢，需要很多任务 / 线程协同实现，那么使用 Asyncio 更合适。
如果是 I/O bound，但是 I/O 操作很快，只需要有限数量的任务 / 线程，那么使用多线程就可以了。
如果是 CPU bound，则需要使用多进程来提高程序运行效率。


asyncio的缺陷：
任何一种方案都不是完美的，都存在一定的局限性，Asyncio 同样如此。
实际工作中，想用好 Asyncio，特别是发挥其强大的功能，很多情况下必须得有相应的 Python 库支持。
比如：多线程编程中，我们使用的是 requests 库；但requests 库并不兼容 Asyncio，必须使用 aiohttp 库来兼容。
Asyncio 软件库的兼容性问题，在 Python3 的早期一直是个大问题，但是随着技术的发展，这个问题正逐步得到解决。
另外，使用 Asyncio 时，在任务的调度方面有了更大的自主权，写代码时就得更加注意，不然很容易出错。
举个例子，如果你需要 await 一系列的操作，就得使用 asyncio.gather()；
如果只是单个的 future，或许只用 asyncio.wait() 就可以了。
那么，对于你的 future，你是想要让它 run_until_complete() 还是 run_forever() 呢？
诸如此类，都是你在面对具体问题时需要考虑的。

总结：
不同于多线程，Asyncio 是单线程的，
但其内部 event loop 的机制，可以让它并发地运行多个不同的任务，
并且比多线程享有更大的自主控制权。

Asyncio 中的任务，在运行过程中不会被打断，因此不会出现 race condition 的情况。
尤其是在 I/O 操作 heavy 的场景下，Asyncio 比多线程的运行效率更高。
因为 Asyncio 内部任务切换的损耗，远比线程切换的损耗要小；
并且 Asyncio 可以开启的任务数量，也比多线程中的线程数量多得多。

但需要注意的是，很多情况下，使用 Asyncio 需要特定第三方库的支持，比如示例中的 aiohttp。
而如果 I/O 操作很快，并不 heavy，那么运用多线程，也能很有效地解决问题。