完成产品的功能需求只是很基础的部分，如何保证所写代码的稳定、高效、无误，才是我们工作的关键。学会合理使用单元测试，正是帮助你实现这一目标的重要路径。
测试驱动开发TDD
Python中的单元测试库unittest库

import unittest

# 将要被测试的排序函数
def sort(arr):
    l = len(arr)
    for i in range(0, l):
        for j in range(i + 1, l):
            if arr[i] >= arr[j]:
                tmp = arr[i]
                arr[i] = arr[j]
                arr[j] = tmp


# 编写子类继承 unittest.TestCase
class TestSort(unittest.TestCase):

   # 以 test 开头的函数将会被测试
   def test_sort(self):
        arr = [3, 4, 1, 5, 6]
        sort(arr)
        # assert 结果跟我们期待的一样
        self.assertEqual(arr, [1, 3, 4, 5, 6])

if __name__ == '__main__':
    ## 如果在 Jupyter 下，请用如下方式运行单元测试
    unittest.main(argv=['first-arg-is-ignored'], exit=False)
    
    ## 如果是命令行下运行，则：
    ## unittest.main()
    
## 输出
..
----------------------------------------------------------------------
Ran 2 tests in 0.002s

OK

注意：测试函数要以test开头，内部通常使用assertEqual()、assertTrue()、assertFalse()和assertRaise()等assert语句对结构进行验证。

整体来看，单元测试的理念是先模块化代码设计，然后针对每个作用单元，编写单独的测试去验证其准确性。更好的模块化设计和更多的+Test+Coverage，是提高代码质量的核心。而单元测试的本质就是通过+mock，去除掉不影响测试的依赖项，把重点放在需要测试的代码核心逻辑上。