并发（Concurrency），通过线程和任务之间互相切换的方式实现，但同一时刻，只允许有一个线程或任务执行。
并发常用于IO密集型程序：
并发通常应用于 I/O 操作频繁的场景，
比如你要从网站上下载多个文件，
I/O 操作的时间可能会比 CPU 运行处理的时间长得多。

并行（Parallelism），则是指多个进程完全同步同时的执行。
并行常用于计算密集型程序：
而并行则更多应用于 CPU heavy 的场景，
比如 MapReduce 中的并行计算，
为了加快运行速度，一般会用多台机器、多个处理器来完成。


在我们学习并发编程时，常常同时听到并发（Concurrency）和并行（Parallelism）这两个术语，
这两者经常一起使用，导致很多人以为它们是一个意思，其实不然。

首先你要辨别一个误区，在 Python 中，并发并不是指同一时刻有多个操作（thread、task）同时进行。
相反，某个特定的时刻，它只允许有一个操作发生，只不过线程 / 任务之间会互相切换，直到完成。
thread 和 task 两种切换顺序的不同方式，分别对应 Python 中并发的两种形式——threading 和 asyncio。

对于 threading，操作系统知道每个线程的所有信息，因此它会做主在适当的时候做线程切换。
很显然，这样的好处是代码容易书写，因为程序员不需要做任何切换操作的处理；
但是切换线程的操作，也有可能出现在一个语句执行的过程中（比如 x += 1），这样就容易出现 race condition 的情况。
而对于 asyncio，主程序想要切换任务时，必须得到此任务可以被切换的通知，
这样一来也就可以避免刚刚提到的 race condition 的情况。

并行，指的才是同一时刻、同时发生。Python 中的 multi-processing 便是这个意思，
对于 multi-processing，你可以简单地这么理解：
比如你的电脑是 6 核处理器，那么在运行程序时，就可以强制 Python 开 6 个进程，同时执行，以加快运行速度。